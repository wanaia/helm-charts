identityTrustDomain: ""
revisionHistoryLimit: 10
linkerdNamespace: linkerd
prometheusUrl: ""
prometheusCredsSecret: ""
jaegerUrl: ""
metricsAPI:
  replicas: 1
  logLevel: ""
  logFormat: ""
  image:
    registry: ""
    name: metrics-api
    tag: ""
    pullPolicy: ""
  resources:
    cpu:
      limit:
      request:
    memory:
      limit:
      request:
    ephemeral-storage:
      limit: ""
      request: ""
  proxy:
  UID:
  GID:
  nodeSelector: *default_node_selector
  tolerations: *default_tolerations
  service:
    annotations: {}
tap:
  replicas: 1
  logLevel: ""
  logFormat: ""
  image:
    registry: ""
    name: tap
    tag: ""
    pullPolicy: ""
  externalSecret: false
  crtPEM: |
  keyPEM: |
  caBundle: |
  injectCaFrom: ""
  injectCaFromSecret: ""
  resources:
    cpu:
      limit:
      request:
    memory:
      limit:
      request:
    ephemeral-storage:
      limit: ""
      request: ""
  ignoreHeaders: []
  proxy:
  UID:
  GID:
  service:
    annotations: {}
tapInjector:
  replicas: 1
  logLevel: ""
  logFormat: ""
  image:
    registry: ""
    name: tap
    tag: ""
    pullPolicy: ""
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
  objectSelector:
  UID:
  GID:
  failurePolicy: Ignore
  resources:
    cpu:
      limit:
      request:
    memory:
      limit:
      request:
    ephemeral-storage:
      limit: ""
      request: ""
  proxy:
  externalSecret: false
  crtPEM: |
  keyPEM: |
  caBundle: |
  injectCaFrom: ""
  injectCaFromSecret: ""
  service:
    annotations: {}
dashboard:
  replicas: 1
  logLevel: ""
  logFormat: ""
  image:
    registry: ""
    name: web
    tag: ""
    pullPolicy: ""
  UID:
  GID:
  restrictPrivileges: false
  enforcedHostRegexp: ""
  resources:
    cpu:
      limit:
      request:
    memory:
      limit:
      request:
    ephemeral-storage:
      limit: ""
      request: ""
  proxy:
  service:
    annotations: {}
    labels: {}
namespaceMetadata:
  image:
    registry: ""
    name: extension-init
    tag: v0.1.4
    pullPolicy: ""
  nodeSelector: *default_node_selector
  tolerations: *default_tolerations
grafana:
  url:
  externalUrl:
  uidPrefix:
prometheus:
  enabled: true
  image:
    registry: prom
    name: prometheus
    tag: v2.55.1
    pullPolicy: ""
  logLevel: ""
  logFormat: ""
  args:
    storage.tsdb.path: /data
    storage.tsdb.retention.time: 6h
    config.file: /etc/prometheus/prometheus.yml
  globalConfig:
    scrape_interval: 10s
    scrape_timeout: 10s
    evaluation_interval: 10s
  podAnnotations: {}
  alertRelabelConfigs:
  alertmanagers:
  remoteWrite:
  ruleConfigMapMounts:
  scrapeConfigs:
  metricRelabelConfigs:
  sidecarContainers:
  resources:
    cpu:
      limit:
      request:
    memory:
      limit:
      request:
    ephemeral-storage:
      limit: ""
      request: ""